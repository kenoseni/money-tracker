const dimensions = {
    height: 300,
    width: 300,
    radius: 150
}


const center = {
    x: (dimensions.width/2) + 5,
    y: (dimensions.height/2) + 5
}

const svg  = d3.select('.canvas')
    .append('svg')
    .attr('width', dimensions.width + 150)
    .attr('height', dimensions.height + 150)

const graph = svg.append('g')
    // translate group to center
    .attr('transform', `translate(${center.x}, ${center.y})`)


const color = d3.scaleOrdinal(d3['schemeSet3']) // we have set the range of colors using the scheme set

// Legend setup
const legendGroup = svg.append('g')
    .attr('transform', `translate(${dimensions.width + 80}, 50)`)

const legend = d3.legendColor()
    .shape('circle')
    .shapePadding(10)
    .scale(color)

const pie = d3.pie() // returns function to generate angles for us
    .sort(null) // don't resort the data based on the size of the angle
    .value(d => d.cost) // Base the size of the angles on the cost property

// the arc generator needs the start angle and end angle to draw the path which is generated by the pie generator
const arcPath = d3.arc()
    .outerRadius(dimensions.radius)
    .innerRadius(dimensions.radius/2)

// create tool tip
const tip = d3.tip()
    .attr('class', 'card')
    .attr('class', 'tipstyle')
    .html(d => {
        let content = `<div class="name">Name: ${d.data.name}</div>`
        content += `<div class="cost">Cost: ${d.data.cost}</div>`
        content += `<div class="delete">Click Slice to delete</div>`
        return content
    })

graph.call(tip)

// update function
const update = (data) => {

    // update color scale domain
    color.domain(data.map(val => val.name))

    // update and call legend
    legendGroup.call(legend)

    legendGroup.selectAll('text').attr('fill', 'red')

    // join enhanced (pie) data to path element
    const paths = graph.selectAll('path')
        .data(pie(data))
    
    // handle the exit selection
    paths.exit()
        .transition().duration(750)
        .attrTween("d", arcTweenExit)
        .remove()

    // handle the current DOM path updates
    paths.attr('d', arcPath)
        .transition().duration(750)
        .attrTween('d', arcTweenUpdate)
    
    paths.enter()
        .append('path')
            .attr('class', 'arc')
            // .attr('d', arcPath)
            .attr('stroke', '#fff')
            .attr('stroke-width', 1)
            .attr('fill', d => color(d.data.name))
            .each(function(d) { this._currentData = d })
            .transition().duration(750)
            .attrTween('d', arcTweenEnter)
    
    // add events
    graph.selectAll('path')
        .on('mouseover', (d, i, n) => {
            tip.show(d, n[i])
            handleMouseOver(d, i, n)
        })
        .on('mouseout', (d, i, n) => {
            tip.hide()
            handleMouseOut(d, i, n)
        })
        .on('dblclick', handledoubleClick)
} 

// data array and firestore
var data = []

db.collection('expenses').onSnapshot(res => {
    res.docChanges().forEach(change => {
        const doc = {...change.doc.data(), id: change.doc.id }

        switch (change.type) {
            case 'added':
                data.push(doc)
                break;
            case 'modified':
                const index = data.findIndex(item => item.id == doc.id)
                data[index] = doc
                break;
            case 'removed':
                data = data.filter(item => item.id !== doc.id) 
                break;
            default:
                break;  
        }
    })
    update(data)
})

const arcTweenEnter = (d) => {
    let i = d3.interpolate(d.endAngle, d.startAngle)

    return function(t) {
        d.startAngle = i(t)
        return arcPath(d)
    }
}

const arcTweenExit = (d) => {
    let i = d3.interpolate(d.startAngle, d.endAngle)

    return function(t) {
        d.startAngle = i(t)
        return arcPath(d)
    }
}

//  use function keyword to allow use of this

function arcTweenUpdate(d) {
    // console.log(this._currentData, d)

    // interpolate between the two object
    let i = d3.interpolate(this._currentData, d)
    
    // update the current prop with new updated data
    this._currentData = d

    // OR

    // this._currentData = i(1)

    return function(t) {
        // d = i(t)
        return arcPath(i(t))
    }
}

// event handlers
const handleMouseOver = (d, i, n) => {
    // console.log(n[i])
    d3.select(n[i])
        .transition('changeSliceFill').duration(300)
            .attr('fill', '#fff')
}
const handleMouseOut = (d, i, n) => {
    // get initial mouse color and use it as a fill
    d3.select(n[i])
        .transition('changeSliceFill').duration(300)
            .attr('fill', color(d.data.name))
}

const handledoubleClick = (d) => {
    // get id
    const id = d.data.id
    // query the firestore document to delete the data
    db.collection('expenses').doc(id).delete()
}
